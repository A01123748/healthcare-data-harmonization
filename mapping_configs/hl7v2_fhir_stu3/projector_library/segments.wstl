// Description: Constructs a FHIR STU3 MessageHeader Resource and its related resources based on V2 MSH Segment
//
// Argument(s):
//   MSH V2 Segment
//
// Output(s):
//   MessageHeader: https://www.hl7.org/fhir/stu3/messageheader.html
//   Organization: https://www.hl7.org/fhir/stu3/organization.html
//
def MSH_MessageHeader (MSH) {
  source.name : MSH.3.1;
  if (MSH.3.3 = "URI" and ~MSH.24?) {
    source.endpoint : MSH.3.2;
  } else {
    source.endpoint : "unknown"   // place-holder for 1-* cardinality
  }
  if (MSH.7?) {
    timestamp : Convert_Instant($MultiFormatParseTime(GetTimeFormats(), MSH.7));
  } else {
    timestamp : $CurrentTime("2006-01-02T15:04:05+01:00", "UTC");
  }
  sender : Build_Reference(Output_Resource(HD_CC_Organization(MSH.4, MSH.17)));
  destination[0].name : MSH.5.1;
  if (~MSH.23?) {
     receiver : Build_Reference(Output_Resource(HD_Organization(MSH.6)));
  } else {
      receiver : Build_Reference(Output_Resource(XON_Organization(MSH.23)));
  }
  if (~MSH.25?) {
    destination[0].endpoint : MSH.6.1;
  }
  meta.security[0].code: MSH.8;
  event.code : MSH.9.2
  event.system : "http://terminology.hl7.org/CodeSystem/v2-0003";
  meta.tag[0].code : MSH.11.1;
  meta.tag[0].system : "http://terminology.hl7.org/CodeSystem/v2-0103";
  meta.tag[1].code : MSH.11.2;
  meta.tag[1].system : "http://terminology.hl7.org/CodeSystem/v2-0207";
  language : CWE_Code(MSH.19);
  responsible : Build_Reference(Output_Resource(XON_Organization(MSH.22)));
  id : $UUID();
  resourceType : "MessageHeader";
}

// Description: Constructs a FHIR STU3 Patient Resource and its related resources based on V2 PID & PD1 Segments
//
// Argument(s):
//   PID V2 Segment
//   PD1 V2 Segment
//
// Output(s):
//   Patient: https://www.hl7.org/fhir/stu3/patient.html
//   Organization: https://www.hl7.org/fhir/stu3/organization.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//
def PID_PD1_Patient(PID, PD1) {
  identifier[] : CX_Identifier(PID.2);
  identifier[] : CX_Identifier(PID.3[]);
  identifier[] : CX_Identifier(PID.4[]);
  name[] : XPN_HumanName(PID.5[]);
  birthDate : Extract_Date($MultiFormatParseTime(GetTimeFormats(), PID.7));
  gender : Convert_TerminologyCode(CWE_Code(PID.8), "Gender");
  name[] : XPN_HumanName(PID.9[]);
  address[] : XAD_Address(PID.11[]);
  telecom[] : XTN_ContactPoint(PID.13[], "home");
  telecom[] : XTN_ContactPoint(PID.14[], "work");
// TODO: Uncomment below
//  communication[0].language : PID.15 => CWE_CodeableConcept;   Need Terminology Mapping: No mappings found in community sheet
//  communication[0].preferred : true;
  maritalStatus : CWE_CodeableConcept(PID.16);
  identifier[] : ST_Identifier(PID.19);
  identifier[] : DLN_Identifier(PID.20, "DL");
  if (~PID.25?) {
    multipleBirthBoolean : PID.24;
  }
  multipleBirthInteger : PID.25;
  deceasedDateTime : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), PID.29));
  if (~PID.29?) {
    deceasedBoolean : PID.30;
  }
  meta.lastUpdated : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), PID.33));
  telecom[] : XTN_ContactPoint(PID.40[], "home");
  generalPractitioner[] : Build_Reference(Output_Resource[](XON_Organization[](PD1.3[])));
  generalPractitioner[] : Build_Reference(Output_Resource[](XCN_Practitioner[](PD1.4[])));
  active : true;
  id : PatientID(PID);
  resourceType : "Patient";
}

// Description: Constructs a FHIR STU3 Accout Resource based on V2 PID-18 Segment and Patient Resource
//
// Argument(s):
//   PID-18 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//
// Output(s):
//   Account: https://www.hl7.org/fhir/stu3/account.html
//
def PID_Account(PID_18, Patient) {
  identifier[] : CX_Identifier(PID_18);
  subject : Build_Reference(Patient);
  id : $UUID();
  resourceType : "Account";
}

// Description: Constructs a FHIR STU3 Condition Resource and its related resources based on V2 DG1 Segment and Patient resource
//
// Argument(s):
//   DG1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//
// Output(s):
//   Condition: https://www.hl7.org/fhir/stu3/condition.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//
def DG1_Condition (DG1, Patient) {
  code : CWE_CodeableConcept(DG1.3);
  code.text : DG1.4;
  onsetDateTime : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), DG1.5));
  asserter : Build_Reference(Output_Resource(XCN_Practitioner(DG1.16[0])));
  identifier[] : EI_Identifier(DG1.20);
  subject : Build_Reference(Patient);
  id : $UUID();
  resourceType : "Condition";
}

// Description: Constructs a FHIR STU3 Encounter Resource and its related resources based on V2 PV1, DG1 Segments and Patient, Condition resources
//
// Argument(s):
//   PV1 V2 Segment
//   DG1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//   Condition Resource already constructed through DG1_Condition Projector: https://www.hl7.org/fhir/stu3/condition.html
//
// Output(s):
//   Patient: https://www.hl7.org/fhir/stu3/patient.html
//   Organization: https://www.hl7.org/fhir/stu3/organization.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//   Location: https://www.hl7.org/fhir/stu3/location.html
//   EpisodeOfCare: https://www.hl7.org/fhir/stu3/episodeofcare.html
//
def PV1_DG1_Encounter(PV1, DG1, Patient, Condition) {
  class : CWE_Coding(PV1.2);
  if (PV1.2.1 ~= "P") {
    $this : PL_Location(PV1.3, "active");
  }
  if (PV1.2.1 = "P") {
    $this : PL_Location(PV1.3, "planned");
  }
  type[0] : CWE_CodeableConcept(PV1.4);
  hospitalization.preAdmissionIdentifier : CX_Identifier(PV1.5);
  $this : PL_Location(PV1.6, "completed");
  participant[] : Build_Participant(PV1.7[], "ATND", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "attender");
  participant[] : Build_Participant(PV1.8[], "REF", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "referrer");
  participant[] : Build_Participant(PV1.9[], "CON", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "consultant");
  hospitalization.reAdmission : CWE_CodeableConcept(PV1.13);
  hospitalization.admitSource : CWE_CodeableConcept(PV1.14);
  participant[] : Build_Participant(PV1.17[], "ADM", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "admitter");
  identifier[0] : CX_Identifier(PV1.19);
  if (~PV1.19.5?) {
    identifier[0].type.coding[0].code : "VN";
  }
  identifier[0].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[0].type.text : "visit number";
  hospitalization.dischargeDisposition : CWE_CodeableConcept(PV1.36);
  hospitalization.destination : Build_Reference(Output_Resource(DLD_Location(PV1.37)));
  hospitalization.dietPreference[] : CWE_CodeableConcept(PV1.38);
  period.start : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), PV1.44));
  period.end : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), PV1.45));
  if (~PV1.45?) {
      status : "unknown";     //--------- Hard-coded for a place holder
  } else {
    status : "finished";
  }
  identifier[] : CX_Identifier(PV1.50[]);
  participant[] : Build_Participant(PV1.52[], "PART", "http://terminology.hl7.org/CodeSystem/v3-ParticipationType", "Participation");
  if (DG1 ~= "" or Condition ~= "") {
    diagnosis[] : DG1_Encounter(DG1[], Condition[]);
    episodeOfCare[] : Build_Reference(Output_Resource(CX_DG1_EpisodeOfCare(PV1.54, DG1, Condition, Patient)));
  }
  subject : Build_Reference(Patient);
  id : $UUID();
  resourceType : "Encounter";
}

// Description: Constructs a FHIR STU3 AllergyIntolerance Resource based on AL1 Segment and Patient resource
//
// Argument(s):
//   AL1 V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//
// Output(s):
//   AllergyIntolerance: https://www.hl7.org/fhir/stu3/allergyintolerance.html
//
def AL1_AllergyIntolerance (AL1, Patient) {
  category[] : Convert_TerminologyCode(CWE_Code(AL1.2), "Allergy_Category");
  type : Convert_TerminologyCode(CWE_Code(AL1.2), "Allergy_Type");
  code : CWE_CodeableConcept(AL1.3);
  verificationStatus : "confirmed";   // Hard-coded for STU3 validation
  if (AL1.4 ~= "U") {
    reaction[0].severity : Convert_TerminologyCode(CWE_Code(AL1.4), "Allergy_Severity");
  }
// TODO: Uncomment below
  //criticality : AL1.4 => CWE_Code;     Need Terminology Mapping: No mappings found in community sheet
//  reaction[0].manifestation[].text : AL1.5[];
  // TODO: Generating invalid FHIR JSON
reaction[0].manifestation[].text : "Place Holder";
  onsetDateTime : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), AL1.6));
  patient : Build_Reference(Patient);
  id : $UUID();
  resourceType : "AllergyIntolerance";
}

// Description: Constructs a FHIR STU3 Observation Resource based on OBX Segment and Patient resource
//
// Argument(s):
//   OBX V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//
// Output(s):
//   Observation: https://www.hl7.org/fhir/stu3/observation.html
//   Device : https://www.hl7.org/fhir/stu3/device.html
//   Patient: https://www.hl7.org/fhir/stu3/patient.html
//   Organization: https://www.hl7.org/fhir/stu3/organization.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//
def OBX_Observation (OBX, Patient) {
  if ($ListLen(OBX.5) > 1) {
    component[] : Build_ObservationComponent(OBX.5[], OBX.2, OBX.3, OBX.6);
  } else {
    code : CWE_CodeableConcept(OBX.3);
    $this : Build_ObservationValue(OBX.5[0], OBX.2, OBX.6);
  }
  referenceRange[0].text : OBX.7;
  if (OBX.11?) {
    status : Convert_TerminologyCode(OBX.11, "Observation_Status");
  } else {
    status : "registered";
  }
  effectiveDateTime: Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), OBX.14));
  performer[] : Build_Reference(Output_Resource(XCN_Practitioner(OBX.16[])));
  method : CWE_CodeableConcept(OBX.17);
  device : Build_Reference(Output_Resource(EI_Device(OBX.18[])));
  bodySite : CWE_CodeableConcept(OBX.20[]);
  identifier[0] : EI_Identifier(OBX.21);
  identifier[0].type.coding[0].code : "FILL";
  performer[] : Build_Reference(Output_Resource(XON_XAD_Organization(OBX.23, OBX.24)));
  performer[] : Build_Reference(Output_Resource(XCN_Practitioner(OBX.25)));
  subject : Build_Reference(Patient);
  id : $UUID();
  resourceType : "Observation";
}

// Description: Constructs a FHIR STU3 DiagnosticReport Resource based on OBR Segment
//
// Argument(s):
//   OBR V2 Segment
//   Patient Resource already constructed through PID_PD1_Patient Projector: https://www.hl7.org/fhir/stu3/patient.html
//   Encounter Resource already constructed through PV1_DG1_Encounter Projector: https://www.hl7.org/fhir/stu3/encounter.html
//
// Output(s):
//   DiagnosticReport: https://hl7.org/fhir/stu3/diagnosticreport.html
//   Encounter: https://www.hl7.org/fhir/stu3/encounter.html
//   Patient: https://www.hl7.org/fhir/stu3/patient.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//   Specimen : https://hl7.org/fhir/stu3/specimen.html
//
def OBR_ORC_DiagnosticReport(OBR, ORC, Patient, Encounter) {
  identifier[0].value : OBR.2.1;
  identifier[0].type.coding[0].code : "PLAC";
  identifier[0].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[1].value : OBR.3.1;
  identifier[1].type.coding[0].code : "FILL";
  identifier[1].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[2].value : ORC.2.1;
  identifier[2].type.coding[0].code : "PLAC";
  identifier[2].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[3].value : ORC.3.1;
  identifier[3].type.coding[0].code : "FILL";
  identifier[3].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  identifier[4].value : ORC.4.1;
  identifier[4].type.coding[0].code : "PGN";
  identifier[4].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/v2-0203";
  code : CWE_CodeableConcept(OBR.4);
  if (~OBR.7?) {
    effectiveDateTime : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), ORC.9));
  } else {
    if (~OBR.8?) {
      effectiveDateTime : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), OBR.7));
    } else {
      effectivePeriod.start : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), OBR.7));
      effectivePeriod.end : Convert_DateTime($MultiFormatParseTime(GetTimeFormats(), OBR.8));
    }
  }
  issued : Convert_Instant($MultiFormatParseTime(GetTimeFormats(), OBR.22));
  category.coding[0].code : OBR.24
  if (OBR.25?) {
    status : Convert_TerminologyCode(OBR.25, "Report_Status");
  } else {
    status : "registered";    // place-holder for 1-1 cardinality
  }
  performer[].actor : Build_Reference(Output_Resource(CNN_Practitioner(OBR.34.1)));
  performer[].actor : Build_Reference(Output_Resource(CNN_Practitioner(OBR.35.1)));
  specimen[] : Build_Reference(Output_Resource(OBR_Specimen(OBR, Patient)));
  subject : Build_Reference(Patient);
  context : Build_Reference(Encounter);
  id : $UUID();
  resourceType : "DiagnosticReport";
}

// Description: Parse PATIENT_RESULT group, and constructs FHIR STU3 Resources based on PID, PD1, PV1, OBX, OBR, ORC sub-segments
//
// Argument(s):
//   PATIENT_RESULT Segment
//
// Output(s):
//   Account: https://www.hl7.org/fhir/stu3/account.html
//   Device : https://www.hl7.org/fhir/stu3/device.html
//   DiagnosticReport: https://hl7.org/fhir/stu3/diagnosticreport.html
//   Encounter: https://www.hl7.org/fhir/stu3/encounter.html
//   Location: https://www.hl7.org/fhir/stu3/location.html
//   Observation: https://www.hl7.org/fhir/stu3/observation.html
//   Organization: https://www.hl7.org/fhir/stu3/organization.html
//   Patient: https://www.hl7.org/fhir/stu3/patient.html
//   Practitioner: https://www.hl7.org/fhir/stu3/practitioner.html
//   Provenance: https://www.hl7.org/fhir/stu3/provenance.html
//   Specimen : https://hl7.org/fhir/stu3/specimen.html
//
def Parse_PATIENT_RESULT (PATIENT_RESULT) {
  var Patient : PID_PD1_Patient(PATIENT_RESULT.PATIENT.PID, PATIENT_RESULT.PATIENT.PD1);
  out Resources : PID_Account(PATIENT_RESULT.PATIENT.PID.18, Patient);
  out Resources : Patient;

  var Encounter : PV1_DG1_Encounter(PATIENT_RESULT.PATIENT.PV1, "", Patient, "");
  out Resources : Encounter;

  if (PATIENT_RESULT.PATIENT.PATIENT_OBSERVATION.OBX?) {
    out Resources : OBX_Observation(PATIENT_RESULT.PATIENT.PATIENT_OBSERVATION.OBX, Patient);
  }

  var Observation : OBX_Observation(PATIENT_RESULT.ORDER_OBSERVATION[*].OBSERVATION[*].OBX[], Patient);
  out Resources : Observation;

  var DiagnosticReport : OBR_ORC_DiagnosticReport(PATIENT_RESULT.ORDER_OBSERVATION[*].OBR[], PATIENT_RESULT.ORDER_OBSERVATION[*].COMMON_ORDER.ORC[], Patient, Encounter);
  out Resources : DiagnosticReport;
}