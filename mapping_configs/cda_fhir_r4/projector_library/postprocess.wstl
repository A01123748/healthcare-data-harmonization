def Output_Resource(required item) {
  var Item : item;
  var Item.id (if ~item.id) : $Hash(item);
  if (ID_Reconciliation()) {
    if (item.resourceType = "Provenance") {
      // Constructs a Reconciled ID as an extension; due to lack of identifier attribute in Provenance Resource: https://www.hl7.org/fhir/provenance.html
      var Item.extension[] : Build_ReconciledIDExtension($Hash(item));
    } else {
      var Item.identifier[] (if item.identifier): II_HashIdentifier(item.identifier);
      var Item.identifier[] (if ~item.identifier): II_HashIdentifier(item);
    }
  }
  out Resources : Item;
  $this : Item;
}

def Build_Reference(required Resource) {
    if ($Type(Resource.identifier) = "container") {
      var ReconciledID : Resource.identifier.value;
    } else {
      var ReconciledIdentifier : Resource.identifier[where $.system = "urn:oid:google/reconciliation-id"];
      var ReconciledID : ReconciledIdentifier[0].value;
    }
    if (ID_Reconciliation()) {
      reference : $StrCat(Resource.resourceType, "/", ReconciledID);
    } else {
      reference : $StrCat(Resource.resourceType, "/", Resource.id);
    }
}

def Build_BundleEntry(required Resource) {
  resource : Resource;
  if (~Resource.id) {
    resource.id : $Hash(Resource);
  }
}

def Build_TransactionBundleEntry(required Resource,Verb) {
  resource : Resource;
  if (~Resource.id) {
    resource.id : $Hash(Resource);
  }
  request.method : Verb;
  request.url : $StrCat(Resource.resourceType, "/", dest resource.id);
}

def Output_Document(required Output) {
  var Resources: $Unique(Output.Resources);
  resourceType : "Bundle";
  identifier : Output.Bundle.identifier;
  timestamp : Output.Bundle.timestamp;
  type : "document";
  entry[] : Build_BundleEntry(Resources[where $.resourceType = "Composition"][]);
  entry[] : Build_BundleEntry(Resources[where $.resourceType ~= "Composition"][]);
  entry[] : Build_BundleEntry(Output_Resource(Build_Provenance(Resources, Output)));
}

def Output_Bundle(required Output) {
  var Resources: $Unique(Output.Resources);
  resourceType : "Bundle";
  identifier : Output.Bundle.identifier;
  timestamp : Output.Bundle.timestamp;
  type : "transaction";
  entry[] : Build_TransactionBundleEntry(Output_Document(Output), "PUT");
  entry[] : Build_TransactionBundleEntry(Resources[where $.resourceType = "Composition"][], "PUT");
  entry[] : Build_TransactionBundleEntry(Resources[where $.resourceType ~= "Composition"][], "PUT");
  entry[] : Build_TransactionBundleEntry(Output_Resource(Build_Provenance(Resources, Output)), "PUT");
}

def Build_Provenance(required Resources, Output) {
  resourceType : "Provenance";
  recorded : Output.Bundle.timestamp;
  target[] : Build_Reference(Resources[]);
  if (Output.CustodianOrganization) {
    agent[0].type.coding[0].code : "custodian";
    agent[0].type.coding[0].system : "http://terminology.hl7.org/CodeSystem/provenance-participant-type";
    agent[0].who : Build_Reference(Output.CustodianOrganization);
  }
  entity[0].role : "source";
  entity[0].what :  Build_Reference(Output.DocumentReference);
}